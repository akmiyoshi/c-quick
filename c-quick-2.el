(global-set-key "\C-x\C-x" 'c-quick-toggle-mode)
(global-set-key [up] 'c-quick-up-key)
(global-set-key [right] 'c-quick-right-key)
(global-set-key [down] 'c-quick-down-key)
(global-set-key [left] 'c-quick-left-key)

(defvar *c-quick-mode* nil)

(defun c-quick-toggle-mode ()
  (interactive)
  (setq *c-quick-mode* (not *c-quick-mode*))
  (if *c-quick-mode*
      (message "c-quick-mode is ON")
    (message "c-quick-mode is OFF")
    )
  )

(defun c-quick-down-key ()
  (interactive)
  (if (not *c-quick-mode*)
      (next-line)
    (c-quick-next-line)
    )
  )

(defun c-quick-up-key ()
  (interactive)
  (if (not *c-quick-mode*)
      (previous-line)
    (c-quick-previous-line)
    )
  )

(defun c-quick-right-key ()
  (interactive)
  (if (not *c-quick-mode*)
      (forward-char)
    (c-quick-forward-sexp)
    )
  )

(defun c-quick-left-key ()
  (interactive)
  (if (not *c-quick-mode*)
      (backward-char)
    (c-quick-backward-sexp)
    )
  )

(defun c-quick-next-line ()
  (interactive)
  (if (not (bolp))
      (forward-char)
    (line-move 1)
    (beginning-of-line)
    )
  )

(defun c-quick-previous-line ()
  (interactive)
  (if (not (bolp))
      (backward-char)
    (line-move -1)
    (beginning-of-line)
    )
  )

(defun c-quick-forward-sexp ()
  (interactive)
  (cond
   ((looking-at "\n")
    (forward-char)
    )
   ((looking-at "\\s(")
    (forward-sexp)
    )
   ((looking-at "\\s)")
    (ding)
    )
   ((looking-at "\\s<")
    (while (and 
            (not (eobp))
            (not (looking-at "\\s>"))
            )
      (forward-char)
      )
    (and (looking-at "\\s>") (forward-char))
    )
   ((looking-at "\\s-")
    (while (looking-at "\\s-")
      (forward-char)
      )
    )
   (t (ignore-errors (forward-sexp)))
   )
  )

(defun c-quick-backward-sexp()
  (interactive)
  (cond
   ((looking-back "\\s(")
    (ding)
    )
   ((looking-back "\\s)")
    (backward-sexp)
    )
   ((looking-back "\\s-")
    (while (looking-back "\\s-")
      (backward-char)
      )
    )
   ((and (looking-back "\\s>")
         (save-excursion
           (line-move -1)
           (beginning-of-line)
           (looking-at "\\(\\s-*\\)\\s<")
           )
         (goto-char (match-end 1))
         )
    )
   ((looking-back "\n")
    (backward-char)
    )
   (t (ignore-errors (backward-sexp)))
   )
  )
